// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/na7r1x/acectl/internal/core/ports (interfaces: BrokerRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	domain "github.com/na7r1x/acectl/internal/core/domain"
	reflect "reflect"
)

// MockBrokerRepository is a mock of BrokerRepository interface
type MockBrokerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBrokerRepositoryMockRecorder
}

// MockBrokerRepositoryMockRecorder is the mock recorder for MockBrokerRepository
type MockBrokerRepositoryMockRecorder struct {
	mock *MockBrokerRepository
}

// NewMockBrokerRepository creates a new mock instance
func NewMockBrokerRepository(ctrl *gomock.Controller) *MockBrokerRepository {
	mock := &MockBrokerRepository{ctrl: ctrl}
	mock.recorder = &MockBrokerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBrokerRepository) EXPECT() *MockBrokerRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockBrokerRepository) Delete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockBrokerRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBrokerRepository)(nil).Delete), arg0)
}

// Get mocks base method
func (m *MockBrokerRepository) Get(arg0 string) (domain.Broker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(domain.Broker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockBrokerRepositoryMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBrokerRepository)(nil).Get), arg0)
}

// GetAll mocks base method
func (m *MockBrokerRepository) GetAll() ([]domain.Broker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]domain.Broker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockBrokerRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockBrokerRepository)(nil).GetAll))
}

// Set mocks base method
func (m *MockBrokerRepository) Set(arg0 domain.Broker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockBrokerRepositoryMockRecorder) Set(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockBrokerRepository)(nil).Set), arg0)
}
